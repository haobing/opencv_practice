#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp> 
#include <iostream> 
#include <opencv2/opencv.hpp>
using namespace cv;
using namespace std;

Mat src,src_gray;
int thresh = 200;
int max_thresh = 255;

void vornerHarris_demo(int,void *);

int main()
{
	src = imread("cat.jpg");
	cvtColor(src,src_gray,CV_BGR2GRAY);
	
	imshow("source",src);
	
	createTrackbar("threshold","source",&thresh,255,vornerHarris_demo);
	vornerHarris_demo(0,0);
	waitKey(0);
	return 0;
}

void vornerHarris_demo(int,void *)
{
	Mat dst,dst_norm,dst_norm_scaled;
	dst = Mat::zeros(src.size(),CV_32FC1);
	
	int blockSize = 2;
	int apertureSize = 3;
	double k =0.04;
	
	cornerHarris(src_gray,dst,blockSize,apertureSize,k,BORDER_DEFAULT);
	
	normalize(dst,dst_norm,0,255,NORM_MINMAX,CV_32FC1,Mat());
	convertScaleAbs(dst_norm,dst_norm_scaled);//该操作可实现图像增强等相关操作的快速运算;
	
	for(int j=0;j<dst_norm.rows;j++)
	{
		for(int i=0;i<dst_norm.cols;i++)
		{
			if((int)dst_norm.at<float>(j,i)>thresh)
			{
				circle(dst_norm_scaled,Point(i,j),5,Scalar(0),2,8,0);
			}
		}
	}
	imshow("corner_window",dst_norm_scaled);
}
	
