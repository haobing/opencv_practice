#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp> 
#include <iostream> 
#include <opencv2/opencv.hpp>
//放射变换
using namespace cv;
using namespace std;

int main()
{
	Mat rot_mat(2,3,CV_32FC1);
	Mat warp_mat(2,3,CV_32FC1);
	Mat src,warp_dst,warp_rotate_dst;
	
	src = imread("cat.jpg",1);
	warp_dst =Mat::zeros(src.rows,src.cols,src.type());
	
	Point2f srcTri[3];
	Point2f dstTri[3];
	
	srcTri[0] = Point2f(0,0);
	srcTri[1] = Point2f(src.cols-1,0);
	srcTri[2] = Point2f(0,src.rows-1);
	
	dstTri[0] = Point2f(0,0);
	dstTri[1] = Point2f(src.cols*0.5,src.rows*0.5);
	dstTri[2] = Point2f(0,src.rows-1);
	
	warp_mat = getAffineTransform(srcTri,dstTri);
	warpAffine(src,warp_dst,warp_mat,warp_dst.size());
	
	Point center = Point(warp_dst.cols/2,warp_dst.rows/2);
	double angle = 90.0;
	double scale = 1.0;
	rot_mat = getRotationMatrix2D(center,angle,scale);
	warpAffine(warp_dst,warp_rotate_dst,rot_mat,warp_dst.size());
	imshow("原图",src);
	imshow("仿射图",warp_dst);
	imshow("旋转图",warp_rotate_dst);
	
	addWeighted(src,0.7,warp_dst,0.3,0,src);
	imshow("add",src);

		waitKey(0);
		 return 0;
}




#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp> 
#include <iostream> 
#include <opencv2/opencv.hpp>
#include <opencv2/tracking.hpp>
#include <stack>
using namespace std;
using namespace cv;

 
int main(int argc, char *argv[])
{
	Mat imageSource = imread("redtree.jpg", 1);
	imshow("Source Image", imageSource);
	
	vector<Point> contour;
	Point p1(10,20), p2(170,80), p3(70,80), p4(280,90);//随意给了4个点
	contour.push_back(p1);
	contour.push_back(p2);
	contour.push_back(p3);
	contour.push_back(p4);
	RotatedRect rect = minAreaRect(contour);//外接矩形
	Point2f vertices[4];
	rect.points(vertices);//外接矩形的4个顶点
	for (int i = 0; i < 4; i++)//画矩形
		line(imageSource, vertices[i], vertices[(i + 1) % 4], Scalar(255, 0, 0));
 
	/*Rect brect = rect.boundingRect();
	rectangle(imageSource, brect, Scalar(255, 0, 0));*/
	imshow("Source Image1", imageSource);
	
	Point2f center = rect.center;//外接矩形中心点坐标
	Mat rot_mat = getRotationMatrix2D(center, rect.angle, 1.0);//求旋转矩阵
	Mat rot_image;
	Size dst_sz(imageSource.size());
	warpAffine(imageSource, rot_image, rot_mat, dst_sz);//原图像旋转
	imshow("rot_image", rot_image);

	Mat result1 = rot_image(Rect(center.x - (rect.size.height / 2), center.y - (rect.size.width/2), rect.size.width, rect.size.height));
	imshow("result", result1);
 
	waitKey(0);
	return 0;
}
