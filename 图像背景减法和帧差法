#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp> 
#include <iostream> 
#include <opencv2/opencv.hpp>
#include <opencv2/tracking.hpp>
using namespace cv;
using namespace std;

Mat MoveDetect(Mat background,Mat frame);

int main()
{
	VideoCapture cap("pra.mp4");
	if(!cap.isOpened())
	{
		cout<<"video open error\n"<<endl;
		return 0;
	}
	int framecount = cap.get(CV_CAP_PROP_FRAME_COUNT);
	int fps = cap.get(CV_CAP_PROP_FPS);
	
	Mat frame;
	Mat background;
	Mat result;
	
	for(int i=0;i<framecount;i++)
	{
		cap>>frame;
		imshow("frame",frame);
		if(frame.empty())
		{
			cout<<"frame is empty"<<endl;
			break;
		}
		
		int frameposition = cap.get(CV_CAP_PROP_POS_FRAMES);
		cout<<"frameposition:"<<frameposition<<endl;
		if(frameposition == 1)
			background = frame.clone();
		result = MoveDetect(background,frame);
		background = frame.clone();//帧差法
		imshow("result",result);
		waitKey(30);
	}
	return 0;
}
Mat MoveDetect(Mat background,Mat frame)
{
	Mat result = frame.clone();
	Mat gray1,gray2;
	cvtColor(background,gray1,CV_BGR2GRAY);
	cvtColor(frame,gray2,CV_BGR2GRAY);
	
	Mat diff;
	absdiff(gray1,gray2,diff);
	imshow("diff",diff);
	
	Mat diff_thresh;
	threshold(diff,diff_thresh,50,255,CV_THRESH_BINARY);
	imshow("diff_thresh",diff_thresh);
	
	Mat kernel_erode = getStructuringElement(MORPH_RECT,Size(3,3));
	Mat kernel_dilate= getStructuringElement(MORPH_RECT,Size(3,3));
	erode(diff_thresh,diff_thresh,kernel_dilate);
	imshow("dilate",kernel_dilate);
	
	dilate(diff_thresh,diff_thresh,kernel_erode);
	imshow("erode",diff_thresh);
	
	vector<vector<Point>> contours;
	findContours(diff_thresh,contours,CV_RETR_EXTERNAL,CV_CHAIN_APPROX_NONE);
	drawContours(result,contours,-1,Scalar(0,0,255),2);
	
	vector<Rect> boundRect(contours.size());
	for(int i=0;i<contours.size();i++)
	{
		boundRect[i] = boundingRect(contours[i]);
		rectangle(result,boundRect[i],Scalar(0,255,0),2);
	}
	return result;
}
	
