#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp> 
#include <iostream> 
#include <opencv2/opencv.hpp>
using namespace cv;
using namespace std;

Mat src,src_gray;
int thresh = 100;
int max_thresh = 255;
RNG rng(12345);

void thresh_callback(int,void*);
int main()
{
	src = imread("cat.jpg",1);
	cvtColor(src,src_gray,CV_BGR2GRAY);
	blur(src_gray,src_gray,Size(3,3));
	
	namedWindow("source");
	imshow("source",src);
	createTrackbar("threshold","source",&thresh,255,thresh_callback);
	thresh_callback(0,0);
	waitKey(0);
	return 0;
}
void thresh_callback(int,void*)
{
	Mat threshold_output;
	vector<vector<Point>> contours;
	vector<Vec4i> hierarchy;
	threshold(src_gray,threshold_output,thresh,255,THRESH_BINARY);
	
	findContours(threshold_output,contours,hierarchy,CV_RETR_TREE,CV_CHAIN_APPROX_SIMPLE,Point(0,0));
	
	vector<vector<Point>> contours_poly(contours.size());
	vector<Rect> boundRect(contours.size());
	vector<Point2f> center(contours.size());
	vector<float> radius(contours.size());
	
	for(int i=0;i<contours.size();i++)
	{
		approxPolyDP(Mat(contours[i]),contours_poly[i],3,true);//多边拟合函数；
		boundRect[i] = boundingRect(Mat(contours_poly[i]));//计算轮廓的垂直边界最小矩形；
		minEnclosingCircle(contours_poly[i],center[i],radius[i]);//求最小包围圆的函数；
	}
	Mat drawing = Mat::zeros(threshold_output.size(),CV_8UC3);
	for(int i=0;i<contours.size();i++)
	{
		Scalar color =Scalar(rng.uniform(0,255),rng.uniform(0,255),rng.uniform(0,255));
		drawContours(drawing,contours_poly,i,color,1,8,vector<Vec4i>(),0,Point());//画拟合出来的多边形
		rectangle(drawing,boundRect[i].tl(),boundRect[i].br(),color,2,8,0);//画矩形
		circle(drawing,center[i],(int)radius[i],color,2,8,0);//画圆形
	}
	namedWindow("Contours");
	imshow("Contours",drawing);
}
	
		
	
	
