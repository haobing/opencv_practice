所谓反向投影就是首先计算某一特征的直方图模型，然后使用模型去寻找图像中存在的该特征。
#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp> 
#include <iostream> 
#include <opencv2/opencv.hpp>
using namespace cv;
using namespace std;

Mat src,hsv,hue;
int bins = 25;
void Hist_and_Backproj(int,void*);
int main()
{
	src = imread("cat.jpg",1);
	cvtColor(src,hsv,CV_BGR2HSV);
	hue.create(hsv.size(),hsv.depth());
	int ch[]={0,0};
	mixChannels(&hsv,1,&hue,1,ch,1);
	namedWindow("sorce_mage");
	createTrackbar("hue bins","sorce_mage",&bins,180,Hist_and_Backproj);
	Hist_and_Backproj(0,0);
	imshow("sorce_mage",src);
	waitKey(0);
	return 0;
}

void Hist_and_Backproj(int,void*)
{
	MatND hist;
	int histSize = MAX(bins,2);
	float hue_range[]={0,180};
	const float *range[]={hue_range};
	
	calcHist(&hue,1,0,Mat(),hist,1,&histSize,range,true,false);
	normalize(hist,hist,0,255,NORM_MINMAX,-1,Mat());
	MatND backproj;
	calcBackProject(&hue,1,0,hist,backproj,range,1,true);

	imshow("反向投影",backproj);

	int w=400,h=400;
	int bin_w = cvRound((double)w/histSize);
	Mat histImg = Mat::zeros(w,h,CV_8UC3);
	for(int i=0;i<bins;i++)
	{
		rectangle(histImg,Point(i*bin_w,h),Point((i+1)*bin_w,h-cvRound(hist.at<float>(i)*h/255.0)),Scalar( 0, 0, 255 ), -1 ); 
	}
	imshow("直方图",histImg);
}
	
