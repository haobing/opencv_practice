模板匹配是一项在一幅图像中寻找与另一幅模板图像最匹配(相似)部分的技术.
使用OpenCV函数 matchTemplate 在模板块和输入图像之间寻找匹配,获得匹配结果图像
使用OpenCV函数 minMaxLoc 在给定的矩阵中寻找最大和最小值(包括它们的位置).
#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp> 
#include <iostream> 
#include <opencv2/opencv.hpp>
using namespace cv;
using namespace std;

Mat img,temp1,result;
int match_method = 1;
int max_Trackbar = 5;

void MatchingMethod(int,void*);
int main()
{
	img = imread("people1.jpg",1);
	temp1 = imread("people2.jpg",1);
	namedWindow("source_image");
	createTrackbar("method","source_image",&match_method,5,MatchingMethod);
	MatchingMethod(0,0);
	waitKey();
	return 0;
}

void MatchingMethod(int,void*)
{
	Mat img_display;
	img.copyTo(img_display);
	
	int result_cols = img.cols-temp1.cols+1;
	int result_rows = img.rows-temp1.rows+1;
	
	result.create(result_rows,result_cols,CV_32FC1);
	
	matchTemplate(img,temp1,result,match_method);
	normalize(result,result,0,1,NORM_MINMAX,-1,Mat());
	
	double minVal,maxVal;
	Point minLoc,maxLoc;
	Point matchLoc;
	
	minMaxLoc(result,&minVal,&maxVal,&minLoc,&maxLoc,Mat());
	if(match_method == CV_TM_SQDIFF||match_method == CV_TM_SQDIFF_NORMED)
	{
		matchLoc = minLoc;
	}
	else
	{
		matchLoc = maxLoc;
	}
	rectangle(img_display,matchLoc,Point(matchLoc.x+temp1.rows,matchLoc.y+temp1.cols),Scalar::all(0),2,8,0);
	rectangle( result, matchLoc, Point( matchLoc.x + temp1.rows , matchLoc.y + temp1.cols ), Scalar::all(0), 2, 8, 0 );
	imshow("image_window",img_display);
	imshow("result_window",result);
}
	
