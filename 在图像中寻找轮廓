#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp> 
#include <iostream> 
#include <opencv2/opencv.hpp>
using namespace cv;
using namespace std;

Mat src,src_gray;
int thresh = 100;
int max_thresh = 255;
RNG rng(12345);

void thresh_callback(int,void*);

int main()
{
	src = imread("redtree.jpg",1);
	cvtColor(src,src_gray,CV_BGR2GRAY);
	blur(src_gray,src_gray,Size(3,3));
	
	namedWindow("source");
	imshow("source",src);
	
	createTrackbar("canny thresh","source",&thresh,max_thresh,thresh_callback);
	thresh_callback(0,0);
	waitKey(0);
	return 0;
}

void thresh_callback(int,void*)
{
	Mat canny_output;
	vector<vector<Point>> contours;
	vector<Vec4i> hierarchy;
	
	Canny(src_gray,canny_output,thresh,thresh*2,3);
	findContours(canny_output,contours,hierarchy,CV_RETR_TREE,CV_CHAIN_APPROX_SIMPLE,Point(0,0));
	
	Mat drawing = Mat::zeros(canny_output.size(),CV_8UC3);
	for(int i=0;i<contours.size();i++)
	{
		Scalar color = Scalar(rng.uniform(0,255),rng.uniform(0,255),rng.uniform(0,255));
		drawContours(drawing,contours,i,color,2,8,hierarchy,0,Point());
	}
	imshow("contours",drawing);
}
